* Nested tuple access looks to the lexer like a float literal.
  Eg: x.1.2 lexes as x . 1.2

* Prevent defining names that differ only by case.
  Allow a type and an identifier to have the same name bar case, but only one
  type and one identifier.

* Strings. Escaping? Triple quoted string ending in " or containing """?

* Type of literals returned by if, etc.

* Type parameters on functions, how to tell what to generate?

* Calling C.

* Allow / outlaw loops in packages. Either option will be trivial once the pass
reorg is complete, we just need to make a decision.

* Rationalise AST children. Definitely not now, maybe later when they've
stabilised.

* Change parse macros to build AST children in order, using last_sibling local
as for building macros. Low priority.

* Add tracing system to parse macros. Low priority, do when bored or when we
next need to debug parsing.

* Conditional code, Windows vs Linux, debug only, etc. Almost certainly need
this, but leave it til later.

* Enum IDs treated like ints, with auto (un)boxing. Low priority.
